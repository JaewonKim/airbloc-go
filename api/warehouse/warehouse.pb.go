// Code generated by protoc-gen-go. DO NOT EDIT.
// source: warehouse.proto

package warehouse // import "github.com/airbloc/airbloc-go/api/warehouse"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RawData struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	OwnerId              string   `protobuf:"bytes,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawData) Reset()         { *m = RawData{} }
func (m *RawData) String() string { return proto.CompactTextString(m) }
func (*RawData) ProtoMessage()    {}
func (*RawData) Descriptor() ([]byte, []int) {
	return fileDescriptor_warehouse_0808f0abf0c0a950, []int{0}
}
func (m *RawData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawData.Unmarshal(m, b)
}
func (m *RawData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawData.Marshal(b, m, deterministic)
}
func (dst *RawData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawData.Merge(dst, src)
}
func (m *RawData) XXX_Size() int {
	return xxx_messageInfo_RawData.Size(m)
}
func (m *RawData) XXX_DiscardUnknown() {
	xxx_messageInfo_RawData.DiscardUnknown(m)
}

var xxx_messageInfo_RawData proto.InternalMessageInfo

func (m *RawData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RawData) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *RawData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type EncryptedData struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	OwnerId              string   `protobuf:"bytes,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	EncryptedPayload     []byte   `protobuf:"bytes,3,opt,name=encryptedPayload,proto3" json:"encryptedPayload,omitempty"`
	Capsule              []byte   `protobuf:"bytes,4,opt,name=capsule,proto3" json:"capsule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptedData) Reset()         { *m = EncryptedData{} }
func (m *EncryptedData) String() string { return proto.CompactTextString(m) }
func (*EncryptedData) ProtoMessage()    {}
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_warehouse_0808f0abf0c0a950, []int{1}
}
func (m *EncryptedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptedData.Unmarshal(m, b)
}
func (m *EncryptedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptedData.Marshal(b, m, deterministic)
}
func (dst *EncryptedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedData.Merge(dst, src)
}
func (m *EncryptedData) XXX_Size() int {
	return xxx_messageInfo_EncryptedData.Size(m)
}
func (m *EncryptedData) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedData.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedData proto.InternalMessageInfo

func (m *EncryptedData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EncryptedData) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *EncryptedData) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

func (m *EncryptedData) GetCapsule() []byte {
	if m != nil {
		return m.Capsule
	}
	return nil
}

type StoreResult struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreResult) Reset()         { *m = StoreResult{} }
func (m *StoreResult) String() string { return proto.CompactTextString(m) }
func (*StoreResult) ProtoMessage()    {}
func (*StoreResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_warehouse_0808f0abf0c0a950, []int{2}
}
func (m *StoreResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreResult.Unmarshal(m, b)
}
func (m *StoreResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreResult.Marshal(b, m, deterministic)
}
func (dst *StoreResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreResult.Merge(dst, src)
}
func (m *StoreResult) XXX_Size() int {
	return xxx_messageInfo_StoreResult.Size(m)
}
func (m *StoreResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreResult.DiscardUnknown(m)
}

var xxx_messageInfo_StoreResult proto.InternalMessageInfo

func (m *StoreResult) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterType((*RawData)(nil), "airbloc.warehouse.RawData")
	proto.RegisterType((*EncryptedData)(nil), "airbloc.warehouse.EncryptedData")
	proto.RegisterType((*StoreResult)(nil), "airbloc.warehouse.StoreResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WarehouseClient is the client API for Warehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WarehouseClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (Warehouse_StoreClient, error)
	StoreEncrypted(ctx context.Context, opts ...grpc.CallOption) (Warehouse_StoreEncryptedClient, error)
}

type warehouseClient struct {
	cc *grpc.ClientConn
}

func NewWarehouseClient(cc *grpc.ClientConn) WarehouseClient {
	return &warehouseClient{cc}
}

func (c *warehouseClient) Store(ctx context.Context, opts ...grpc.CallOption) (Warehouse_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Warehouse_serviceDesc.Streams[0], "/airbloc.warehouse.Warehouse/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &warehouseStoreClient{stream}
	return x, nil
}

type Warehouse_StoreClient interface {
	Send(*RawData) error
	CloseAndRecv() (*StoreResult, error)
	grpc.ClientStream
}

type warehouseStoreClient struct {
	grpc.ClientStream
}

func (x *warehouseStoreClient) Send(m *RawData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *warehouseStoreClient) CloseAndRecv() (*StoreResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *warehouseClient) StoreEncrypted(ctx context.Context, opts ...grpc.CallOption) (Warehouse_StoreEncryptedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Warehouse_serviceDesc.Streams[1], "/airbloc.warehouse.Warehouse/StoreEncrypted", opts...)
	if err != nil {
		return nil, err
	}
	x := &warehouseStoreEncryptedClient{stream}
	return x, nil
}

type Warehouse_StoreEncryptedClient interface {
	Send(*EncryptedData) error
	CloseAndRecv() (*StoreResult, error)
	grpc.ClientStream
}

type warehouseStoreEncryptedClient struct {
	grpc.ClientStream
}

func (x *warehouseStoreEncryptedClient) Send(m *EncryptedData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *warehouseStoreEncryptedClient) CloseAndRecv() (*StoreResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WarehouseServer is the server API for Warehouse service.
type WarehouseServer interface {
	Store(Warehouse_StoreServer) error
	StoreEncrypted(Warehouse_StoreEncryptedServer) error
}

func RegisterWarehouseServer(s *grpc.Server, srv WarehouseServer) {
	s.RegisterService(&_Warehouse_serviceDesc, srv)
}

func _Warehouse_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WarehouseServer).Store(&warehouseStoreServer{stream})
}

type Warehouse_StoreServer interface {
	SendAndClose(*StoreResult) error
	Recv() (*RawData, error)
	grpc.ServerStream
}

type warehouseStoreServer struct {
	grpc.ServerStream
}

func (x *warehouseStoreServer) SendAndClose(m *StoreResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *warehouseStoreServer) Recv() (*RawData, error) {
	m := new(RawData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Warehouse_StoreEncrypted_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WarehouseServer).StoreEncrypted(&warehouseStoreEncryptedServer{stream})
}

type Warehouse_StoreEncryptedServer interface {
	SendAndClose(*StoreResult) error
	Recv() (*EncryptedData, error)
	grpc.ServerStream
}

type warehouseStoreEncryptedServer struct {
	grpc.ServerStream
}

func (x *warehouseStoreEncryptedServer) SendAndClose(m *StoreResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *warehouseStoreEncryptedServer) Recv() (*EncryptedData, error) {
	m := new(EncryptedData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Warehouse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.warehouse.Warehouse",
	HandlerType: (*WarehouseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _Warehouse_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StoreEncrypted",
			Handler:       _Warehouse_StoreEncrypted_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "warehouse.proto",
}

func init() { proto.RegisterFile("warehouse.proto", fileDescriptor_warehouse_0808f0abf0c0a950) }

var fileDescriptor_warehouse_0808f0abf0c0a950 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x27, 0x6e, 0x3a, 0xf6, 0xfc, 0x37, 0x73, 0x0a, 0x3b, 0xe8, 0xe8, 0x69, 0x28, 0x4b, 0x41,
	0xbf, 0x81, 0xb8, 0x83, 0x37, 0xad, 0x82, 0xe0, 0x2d, 0x6d, 0x1f, 0x5b, 0xa1, 0xee, 0x85, 0x34,
	0xa1, 0xf4, 0xec, 0x97, 0xf1, 0x63, 0x4a, 0x63, 0x53, 0x26, 0x1b, 0x08, 0x9e, 0xf2, 0xde, 0xfb,
	0xfd, 0x79, 0xc9, 0x2f, 0x70, 0x5e, 0x2b, 0x83, 0x6b, 0x72, 0x15, 0x4a, 0x6d, 0xc8, 0x12, 0xbf,
	0x50, 0x85, 0x49, 0x4b, 0xca, 0x64, 0x0f, 0x44, 0xcf, 0x30, 0x4a, 0x54, 0xfd, 0xa0, 0xac, 0xe2,
	0x1c, 0x86, 0xb6, 0xd1, 0x28, 0xd8, 0x8c, 0xcd, 0xc7, 0x89, 0xaf, 0xb9, 0x80, 0x11, 0xd5, 0x1b,
	0x34, 0x8f, 0xb9, 0x38, 0xf0, 0xe3, 0xd0, 0xb6, 0x88, 0x56, 0x4d, 0x49, 0x2a, 0x17, 0x83, 0x1f,
	0xa4, 0x6b, 0xa3, 0x4f, 0x06, 0xa7, 0xcb, 0x4d, 0x66, 0x1a, 0x6d, 0x31, 0xff, 0x87, 0xf3, 0x35,
	0x4c, 0x30, 0xc8, 0x9f, 0xb6, 0x56, 0x9c, 0x24, 0x3b, 0xf3, 0xd6, 0x25, 0x53, 0xba, 0x72, 0x25,
	0x8a, 0xa1, 0xa7, 0x84, 0x36, 0xba, 0x82, 0xe3, 0x17, 0x4b, 0x06, 0x13, 0xac, 0x5c, 0x69, 0xf9,
	0x04, 0x06, 0xce, 0x14, 0xdd, 0x0d, 0xda, 0xf2, 0xf6, 0x8b, 0xc1, 0xf8, 0x2d, 0xe4, 0xc0, 0x97,
	0x70, 0xe8, 0xe9, 0x7c, 0x2a, 0x77, 0x42, 0x92, 0x5d, 0x42, 0xd3, 0xcb, 0x3d, 0xd8, 0xd6, 0x92,
	0x39, 0xe3, 0xaf, 0x70, 0xe6, 0x07, 0xfd, 0xfb, 0xf9, 0x6c, 0x8f, 0xe6, 0x57, 0x3a, 0x7f, 0xbb,
	0xde, 0x2f, 0xde, 0x6f, 0x56, 0x85, 0x5d, 0xbb, 0x54, 0x66, 0xf4, 0x11, 0x77, 0xec, 0x70, 0x2e,
	0x56, 0x14, 0x2b, 0x5d, 0xc4, 0xbd, 0x38, 0x3d, 0xf2, 0xbf, 0x7d, 0xf7, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x06, 0xc5, 0x5c, 0x72, 0x00, 0x02, 0x00, 0x00,
}
