// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package data // import "github.com/airbloc/airbloc-go/api/data"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/airbloc/airbloc-go/api/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	DataId               string             `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
	CollectionId         string             `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	OwnerUserAid         string             `protobuf:"bytes,3,opt,name=ownerUserAid,proto3" json:"ownerUserAid,omitempty"`
	Uri                  string             `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	RegisteredAt         uint64             `protobuf:"varint,5,opt,name=registeredAt,proto3" json:"registeredAt,omitempty"`
	Permissions          []*Data_Permission `protobuf:"bytes,6,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *Data) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *Data) GetOwnerUserAid() string {
	if m != nil {
		return m.OwnerUserAid
	}
	return ""
}

func (m *Data) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Data) GetRegisteredAt() uint64 {
	if m != nil {
		return m.RegisteredAt
	}
	return 0
}

func (m *Data) GetPermissions() []*Data_Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type Data_Permission struct {
	ConsumerId           string   `protobuf:"bytes,1,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	AllowAccess          bool     `protobuf:"varint,2,opt,name=allowAccess,proto3" json:"allowAccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data_Permission) Reset()         { *m = Data_Permission{} }
func (m *Data_Permission) String() string { return proto.CompactTextString(m) }
func (*Data_Permission) ProtoMessage()    {}
func (*Data_Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{0, 0}
}
func (m *Data_Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data_Permission.Unmarshal(m, b)
}
func (m *Data_Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data_Permission.Marshal(b, m, deterministic)
}
func (dst *Data_Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data_Permission.Merge(dst, src)
}
func (m *Data_Permission) XXX_Size() int {
	return xxx_messageInfo_Data_Permission.Size(m)
}
func (m *Data_Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Data_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Data_Permission proto.InternalMessageInfo

func (m *Data_Permission) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *Data_Permission) GetAllowAccess() bool {
	if m != nil {
		return m.AllowAccess
	}
	return false
}

type DataId struct {
	DataId               string   `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataId) Reset()         { *m = DataId{} }
func (m *DataId) String() string { return proto.CompactTextString(m) }
func (*DataId) ProtoMessage()    {}
func (*DataId) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{1}
}
func (m *DataId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataId.Unmarshal(m, b)
}
func (m *DataId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataId.Marshal(b, m, deterministic)
}
func (dst *DataId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataId.Merge(dst, src)
}
func (m *DataId) XXX_Size() int {
	return xxx_messageInfo_DataId.Size(m)
}
func (m *DataId) XXX_DiscardUnknown() {
	xxx_messageInfo_DataId.DiscardUnknown(m)
}

var xxx_messageInfo_DataId proto.InternalMessageInfo

func (m *DataId) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

type Batch struct {
	BatchId              string   `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{2}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (dst *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(dst, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

type PreEncryptRequest struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreEncryptRequest) Reset()         { *m = PreEncryptRequest{} }
func (m *PreEncryptRequest) String() string { return proto.CompactTextString(m) }
func (*PreEncryptRequest) ProtoMessage()    {}
func (*PreEncryptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{3}
}
func (m *PreEncryptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreEncryptRequest.Unmarshal(m, b)
}
func (m *PreEncryptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreEncryptRequest.Marshal(b, m, deterministic)
}
func (dst *PreEncryptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreEncryptRequest.Merge(dst, src)
}
func (m *PreEncryptRequest) XXX_Size() int {
	return xxx_messageInfo_PreEncryptRequest.Size(m)
}
func (m *PreEncryptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreEncryptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreEncryptRequest proto.InternalMessageInfo

func (m *PreEncryptRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type PreEncryptResult struct {
	EncryptedPayload     []byte   `protobuf:"bytes,1,opt,name=encryptedPayload,proto3" json:"encryptedPayload,omitempty"`
	Capsule              []byte   `protobuf:"bytes,2,opt,name=capsule,proto3" json:"capsule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreEncryptResult) Reset()         { *m = PreEncryptResult{} }
func (m *PreEncryptResult) String() string { return proto.CompactTextString(m) }
func (*PreEncryptResult) ProtoMessage()    {}
func (*PreEncryptResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{4}
}
func (m *PreEncryptResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreEncryptResult.Unmarshal(m, b)
}
func (m *PreEncryptResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreEncryptResult.Marshal(b, m, deterministic)
}
func (dst *PreEncryptResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreEncryptResult.Merge(dst, src)
}
func (m *PreEncryptResult) XXX_Size() int {
	return xxx_messageInfo_PreEncryptResult.Size(m)
}
func (m *PreEncryptResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PreEncryptResult.DiscardUnknown(m)
}

var xxx_messageInfo_PreEncryptResult proto.InternalMessageInfo

func (m *PreEncryptResult) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

func (m *PreEncryptResult) GetCapsule() []byte {
	if m != nil {
		return m.Capsule
	}
	return nil
}

type RegisterDataRequest struct {
	CollectionId         string   `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	OwnerUserAid         string   `protobuf:"bytes,2,opt,name=ownerUserAid,proto3" json:"ownerUserAid,omitempty"`
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterDataRequest) Reset()         { *m = RegisterDataRequest{} }
func (m *RegisterDataRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterDataRequest) ProtoMessage()    {}
func (*RegisterDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{5}
}
func (m *RegisterDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterDataRequest.Unmarshal(m, b)
}
func (m *RegisterDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterDataRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDataRequest.Merge(dst, src)
}
func (m *RegisterDataRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterDataRequest.Size(m)
}
func (m *RegisterDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDataRequest proto.InternalMessageInfo

func (m *RegisterDataRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *RegisterDataRequest) GetOwnerUserAid() string {
	if m != nil {
		return m.OwnerUserAid
	}
	return ""
}

func (m *RegisterDataRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type RegisterDataSummary struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	BatchId              string   `protobuf:"bytes,2,opt,name=batchId,proto3" json:"batchId,omitempty"`
	GasUsed              uint64   `protobuf:"varint,3,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterDataSummary) Reset()         { *m = RegisterDataSummary{} }
func (m *RegisterDataSummary) String() string { return proto.CompactTextString(m) }
func (*RegisterDataSummary) ProtoMessage()    {}
func (*RegisterDataSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{6}
}
func (m *RegisterDataSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterDataSummary.Unmarshal(m, b)
}
func (m *RegisterDataSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterDataSummary.Marshal(b, m, deterministic)
}
func (dst *RegisterDataSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDataSummary.Merge(dst, src)
}
func (m *RegisterDataSummary) XXX_Size() int {
	return xxx_messageInfo_RegisterDataSummary.Size(m)
}
func (m *RegisterDataSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDataSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDataSummary proto.InternalMessageInfo

func (m *RegisterDataSummary) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *RegisterDataSummary) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *RegisterDataSummary) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

type BatchGetResult struct {
	Data                 []*Data  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetResult) Reset()         { *m = BatchGetResult{} }
func (m *BatchGetResult) String() string { return proto.CompactTextString(m) }
func (*BatchGetResult) ProtoMessage()    {}
func (*BatchGetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{7}
}
func (m *BatchGetResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetResult.Unmarshal(m, b)
}
func (m *BatchGetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetResult.Marshal(b, m, deterministic)
}
func (dst *BatchGetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetResult.Merge(dst, src)
}
func (m *BatchGetResult) XXX_Size() int {
	return xxx_messageInfo_BatchGetResult.Size(m)
}
func (m *BatchGetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetResult.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetResult proto.InternalMessageInfo

func (m *BatchGetResult) GetData() []*Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type SetDataPermissionRequest struct {
	DataId               string   `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	AllowAccess          bool     `protobuf:"varint,3,opt,name=allowAccess,proto3" json:"allowAccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDataPermissionRequest) Reset()         { *m = SetDataPermissionRequest{} }
func (m *SetDataPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*SetDataPermissionRequest) ProtoMessage()    {}
func (*SetDataPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{8}
}
func (m *SetDataPermissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDataPermissionRequest.Unmarshal(m, b)
}
func (m *SetDataPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDataPermissionRequest.Marshal(b, m, deterministic)
}
func (dst *SetDataPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataPermissionRequest.Merge(dst, src)
}
func (m *SetDataPermissionRequest) XXX_Size() int {
	return xxx_messageInfo_SetDataPermissionRequest.Size(m)
}
func (m *SetDataPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataPermissionRequest proto.InternalMessageInfo

func (m *SetDataPermissionRequest) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *SetDataPermissionRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *SetDataPermissionRequest) GetAllowAccess() bool {
	if m != nil {
		return m.AllowAccess
	}
	return false
}

type SetBatchDataPermissionRequest struct {
	BatchId              string   `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	AllowAccess          bool     `protobuf:"varint,3,opt,name=allowAccess,proto3" json:"allowAccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBatchDataPermissionRequest) Reset()         { *m = SetBatchDataPermissionRequest{} }
func (m *SetBatchDataPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*SetBatchDataPermissionRequest) ProtoMessage()    {}
func (*SetBatchDataPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_e4d31982069008a2, []int{9}
}
func (m *SetBatchDataPermissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBatchDataPermissionRequest.Unmarshal(m, b)
}
func (m *SetBatchDataPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBatchDataPermissionRequest.Marshal(b, m, deterministic)
}
func (dst *SetBatchDataPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBatchDataPermissionRequest.Merge(dst, src)
}
func (m *SetBatchDataPermissionRequest) XXX_Size() int {
	return xxx_messageInfo_SetBatchDataPermissionRequest.Size(m)
}
func (m *SetBatchDataPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBatchDataPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBatchDataPermissionRequest proto.InternalMessageInfo

func (m *SetBatchDataPermissionRequest) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *SetBatchDataPermissionRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *SetBatchDataPermissionRequest) GetAllowAccess() bool {
	if m != nil {
		return m.AllowAccess
	}
	return false
}

func init() {
	proto.RegisterType((*Data)(nil), "airbloc.data.Data")
	proto.RegisterType((*Data_Permission)(nil), "airbloc.data.Data.Permission")
	proto.RegisterType((*DataId)(nil), "airbloc.data.DataId")
	proto.RegisterType((*Batch)(nil), "airbloc.data.Batch")
	proto.RegisterType((*PreEncryptRequest)(nil), "airbloc.data.PreEncryptRequest")
	proto.RegisterType((*PreEncryptResult)(nil), "airbloc.data.PreEncryptResult")
	proto.RegisterType((*RegisterDataRequest)(nil), "airbloc.data.RegisterDataRequest")
	proto.RegisterType((*RegisterDataSummary)(nil), "airbloc.data.RegisterDataSummary")
	proto.RegisterType((*BatchGetResult)(nil), "airbloc.data.BatchGetResult")
	proto.RegisterType((*SetDataPermissionRequest)(nil), "airbloc.data.SetDataPermissionRequest")
	proto.RegisterType((*SetBatchDataPermissionRequest)(nil), "airbloc.data.SetBatchDataPermissionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	PreEncrypt(ctx context.Context, opts ...grpc.CallOption) (DataService_PreEncryptClient, error)
	Register(ctx context.Context, opts ...grpc.CallOption) (DataService_RegisterClient, error)
	Get(ctx context.Context, in *DataId, opts ...grpc.CallOption) (*Data, error)
	BatchGet(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*BatchGetResult, error)
	SetPermission(ctx context.Context, in *SetDataPermissionRequest, opts ...grpc.CallOption) (*common.Result, error)
	SetPermissionBatch(ctx context.Context, in *SetBatchDataPermissionRequest, opts ...grpc.CallOption) (*common.Results, error)
	Unregister(ctx context.Context, in *DataId, opts ...grpc.CallOption) (*common.Result, error)
	UnregisterBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*common.Results, error)
	Select(ctx context.Context, opts ...grpc.CallOption) (DataService_SelectClient, error)
	Release(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*common.Result, error)
}

type dataServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataServiceClient(cc *grpc.ClientConn) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) PreEncrypt(ctx context.Context, opts ...grpc.CallOption) (DataService_PreEncryptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[0], "/airbloc.data.DataService/PreEncrypt", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServicePreEncryptClient{stream}
	return x, nil
}

type DataService_PreEncryptClient interface {
	Send(*PreEncryptRequest) error
	Recv() (*PreEncryptResult, error)
	grpc.ClientStream
}

type dataServicePreEncryptClient struct {
	grpc.ClientStream
}

func (x *dataServicePreEncryptClient) Send(m *PreEncryptRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServicePreEncryptClient) Recv() (*PreEncryptResult, error) {
	m := new(PreEncryptResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) Register(ctx context.Context, opts ...grpc.CallOption) (DataService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[1], "/airbloc.data.DataService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceRegisterClient{stream}
	return x, nil
}

type DataService_RegisterClient interface {
	Send(*RegisterDataRequest) error
	CloseAndRecv() (*RegisterDataSummary, error)
	grpc.ClientStream
}

type dataServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *dataServiceRegisterClient) Send(m *RegisterDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceRegisterClient) CloseAndRecv() (*RegisterDataSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegisterDataSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) Get(ctx context.Context, in *DataId, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) BatchGet(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*BatchGetResult, error) {
	out := new(BatchGetResult)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/BatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SetPermission(ctx context.Context, in *SetDataPermissionRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/SetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SetPermissionBatch(ctx context.Context, in *SetBatchDataPermissionRequest, opts ...grpc.CallOption) (*common.Results, error) {
	out := new(common.Results)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/SetPermissionBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Unregister(ctx context.Context, in *DataId, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnregisterBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*common.Results, error) {
	out := new(common.Results)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/UnregisterBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Select(ctx context.Context, opts ...grpc.CallOption) (DataService_SelectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[2], "/airbloc.data.DataService/Select", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceSelectClient{stream}
	return x, nil
}

type DataService_SelectClient interface {
	Send(*DataId) error
	CloseAndRecv() (*Batch, error)
	grpc.ClientStream
}

type dataServiceSelectClient struct {
	grpc.ClientStream
}

func (x *dataServiceSelectClient) Send(m *DataId) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceSelectClient) CloseAndRecv() (*Batch, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Batch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) Release(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/airbloc.data.DataService/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	PreEncrypt(DataService_PreEncryptServer) error
	Register(DataService_RegisterServer) error
	Get(context.Context, *DataId) (*Data, error)
	BatchGet(context.Context, *Batch) (*BatchGetResult, error)
	SetPermission(context.Context, *SetDataPermissionRequest) (*common.Result, error)
	SetPermissionBatch(context.Context, *SetBatchDataPermissionRequest) (*common.Results, error)
	Unregister(context.Context, *DataId) (*common.Result, error)
	UnregisterBatch(context.Context, *Batch) (*common.Results, error)
	Select(DataService_SelectServer) error
	Release(context.Context, *Batch) (*common.Result, error)
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_PreEncrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).PreEncrypt(&dataServicePreEncryptServer{stream})
}

type DataService_PreEncryptServer interface {
	Send(*PreEncryptResult) error
	Recv() (*PreEncryptRequest, error)
	grpc.ServerStream
}

type dataServicePreEncryptServer struct {
	grpc.ServerStream
}

func (x *dataServicePreEncryptServer) Send(m *PreEncryptResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServicePreEncryptServer) Recv() (*PreEncryptRequest, error) {
	m := new(PreEncryptRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).Register(&dataServiceRegisterServer{stream})
}

type DataService_RegisterServer interface {
	SendAndClose(*RegisterDataSummary) error
	Recv() (*RegisterDataRequest, error)
	grpc.ServerStream
}

type dataServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *dataServiceRegisterServer) SendAndClose(m *RegisterDataSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceRegisterServer) Recv() (*RegisterDataRequest, error) {
	m := new(RegisterDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Get(ctx, req.(*DataId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).BatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/BatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).BatchGet(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/SetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SetPermission(ctx, req.(*SetDataPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SetPermissionBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBatchDataPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SetPermissionBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/SetPermissionBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SetPermissionBatch(ctx, req.(*SetBatchDataPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Unregister(ctx, req.(*DataId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnregisterBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnregisterBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/UnregisterBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnregisterBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Select_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).Select(&dataServiceSelectServer{stream})
}

type DataService_SelectServer interface {
	SendAndClose(*Batch) error
	Recv() (*DataId, error)
	grpc.ServerStream
}

type dataServiceSelectServer struct {
	grpc.ServerStream
}

func (x *dataServiceSelectServer) SendAndClose(m *Batch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceSelectServer) Recv() (*DataId, error) {
	m := new(DataId)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.data.DataService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Release(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.data.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DataService_Get_Handler,
		},
		{
			MethodName: "BatchGet",
			Handler:    _DataService_BatchGet_Handler,
		},
		{
			MethodName: "SetPermission",
			Handler:    _DataService_SetPermission_Handler,
		},
		{
			MethodName: "SetPermissionBatch",
			Handler:    _DataService_SetPermissionBatch_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _DataService_Unregister_Handler,
		},
		{
			MethodName: "UnregisterBatch",
			Handler:    _DataService_UnregisterBatch_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _DataService_Release_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PreEncrypt",
			Handler:       _DataService_PreEncrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Register",
			Handler:       _DataService_Register_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Select",
			Handler:       _DataService_Select_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "data.proto",
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_data_e4d31982069008a2) }

var fileDescriptor_data_e4d31982069008a2 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x6b, 0x13, 0x41,
	0x10, 0xe6, 0x92, 0x34, 0x8d, 0x93, 0xa8, 0x75, 0x2b, 0xf5, 0x38, 0x6c, 0x4d, 0xef, 0xa1, 0x1c,
	0x4a, 0x13, 0xa9, 0x28, 0x22, 0x48, 0x69, 0xa9, 0x94, 0xbe, 0x68, 0xdd, 0x10, 0x90, 0xbe, 0x6d,
	0xf6, 0x86, 0xf4, 0xe0, 0x72, 0x7b, 0xee, 0xee, 0x59, 0x82, 0x7f, 0x93, 0x7f, 0x82, 0xff, 0x9b,
	0xec, 0xfd, 0x48, 0xee, 0xcc, 0x9d, 0x0a, 0x3e, 0xf5, 0xe6, 0x9b, 0x6f, 0x67, 0x66, 0xbf, 0xf9,
	0xba, 0x01, 0xf0, 0x99, 0x66, 0xa3, 0x58, 0x0a, 0x2d, 0xc8, 0x80, 0x05, 0x72, 0x16, 0x0a, 0x3e,
	0x32, 0x98, 0xd3, 0xd7, 0xcb, 0x18, 0x55, 0x96, 0x72, 0x7f, 0xb4, 0xa0, 0x73, 0xc1, 0x34, 0x23,
	0x7b, 0xd0, 0x35, 0xd9, 0x2b, 0xdf, 0xb6, 0x86, 0x96, 0x77, 0x8f, 0xe6, 0x11, 0x71, 0x61, 0xc0,
	0x45, 0x18, 0x22, 0xd7, 0x81, 0x88, 0xae, 0x7c, 0xbb, 0x95, 0x66, 0x2b, 0x98, 0xe1, 0x88, 0xbb,
	0x08, 0xe5, 0x54, 0xa1, 0x3c, 0x0b, 0x7c, 0xbb, 0x9d, 0x71, 0xca, 0x18, 0xd9, 0x81, 0x76, 0x22,
	0x03, 0xbb, 0x93, 0xa6, 0xcc, 0xa7, 0x39, 0x25, 0x71, 0x1e, 0x28, 0x8d, 0x12, 0xfd, 0x33, 0x6d,
	0x6f, 0x0d, 0x2d, 0xaf, 0x43, 0x2b, 0x18, 0x39, 0x85, 0x7e, 0x8c, 0x72, 0x11, 0x28, 0x15, 0x88,
	0x48, 0xd9, 0xdd, 0x61, 0xdb, 0xeb, 0x9f, 0xec, 0x8f, 0xca, 0xf7, 0x19, 0x99, 0xf1, 0x47, 0xd7,
	0x2b, 0x16, 0x2d, 0x9f, 0x70, 0x3e, 0x02, 0xac, 0x53, 0xe4, 0x00, 0x80, 0x8b, 0x48, 0x25, 0x0b,
	0x94, 0xab, 0x8b, 0x96, 0x10, 0x32, 0x84, 0x3e, 0x0b, 0x43, 0x71, 0x77, 0xc6, 0x39, 0x2a, 0x95,
	0xde, 0xb5, 0x47, 0xcb, 0x90, 0x3b, 0x84, 0xee, 0x45, 0x26, 0x4c, 0x83, 0x60, 0xee, 0x21, 0x6c,
	0x9d, 0x33, 0xcd, 0x6f, 0x89, 0x0d, 0xdb, 0x33, 0xf3, 0xb1, 0x62, 0x14, 0xa1, 0x7b, 0x0c, 0x8f,
	0xae, 0x25, 0x7e, 0x88, 0xb8, 0x5c, 0xc6, 0x9a, 0xe2, 0xd7, 0x04, 0x95, 0x36, 0xf4, 0x98, 0x2d,
	0x43, 0xc1, 0x56, 0xf4, 0x3c, 0x74, 0xbf, 0xc0, 0x4e, 0x99, 0xae, 0x92, 0x50, 0x93, 0xe7, 0xb0,
	0x83, 0x19, 0x80, 0xfe, 0x75, 0xe9, 0xd8, 0x80, 0x6e, 0xe0, 0xa6, 0x32, 0x67, 0xb1, 0x4a, 0x42,
	0x4c, 0x6f, 0x34, 0xa0, 0x45, 0xe8, 0x0a, 0xd8, 0xa5, 0xb9, 0xdc, 0xe6, 0x56, 0xc5, 0x28, 0xbf,
	0xef, 0xdc, 0xfa, 0x87, 0x9d, 0xb7, 0x9a, 0x77, 0xde, 0x5e, 0xed, 0xdc, 0xe5, 0xd5, 0x86, 0x93,
	0x64, 0xb1, 0x60, 0x72, 0x69, 0x26, 0x54, 0x09, 0xe7, 0x88, 0x59, 0xaf, 0x1e, 0x2d, 0xc2, 0xb2,
	0x88, 0xad, 0x8a, 0x88, 0x26, 0x33, 0x67, 0x6a, 0xaa, 0x30, 0xf3, 0x5b, 0x87, 0x16, 0xa1, 0xfb,
	0x16, 0x1e, 0xa4, 0x1b, 0xb8, 0xc4, 0x42, 0xad, 0x23, 0xe8, 0x98, 0xed, 0xd8, 0x56, 0xea, 0x1f,
	0xb2, 0xe9, 0x1f, 0x9a, 0xe6, 0x5d, 0x0d, 0xf6, 0x04, 0xb5, 0x01, 0x4a, 0x7e, 0xca, 0x45, 0x69,
	0xfa, 0x07, 0xa9, 0x7a, 0xaa, 0xf5, 0x37, 0x4f, 0xb5, 0x37, 0x3d, 0xf5, 0x1d, 0xf6, 0x27, 0xa8,
	0xd3, 0x91, 0xeb, 0x5b, 0x37, 0x3a, 0xe9, 0xff, 0x9b, 0x9f, 0xfc, 0xdc, 0x82, 0x7e, 0xba, 0x0a,
	0x94, 0xdf, 0x02, 0x8e, 0xe4, 0x33, 0xc0, 0xda, 0x6c, 0xe4, 0x59, 0x55, 0xaa, 0x0d, 0xd7, 0x3a,
	0x07, 0xcd, 0x04, 0xa3, 0xbc, 0x67, 0xbd, 0xb4, 0x08, 0x85, 0x5e, 0xb1, 0x74, 0x72, 0x58, 0xe5,
	0xd7, 0xb8, 0xcf, 0xf9, 0x03, 0x25, 0xf7, 0x8b, 0x67, 0x91, 0x31, 0xb4, 0x2f, 0x51, 0x93, 0xc7,
	0x9b, 0xab, 0xbc, 0xf2, 0x9d, 0x9a, 0x05, 0x93, 0xf7, 0xd0, 0x2b, 0x4c, 0x41, 0x76, 0xab, 0xf9,
	0x14, 0x77, 0x9e, 0xd6, 0x80, 0x6b, 0x07, 0x7d, 0x82, 0xfb, 0x13, 0xd4, 0xa5, 0xa7, 0xe4, 0xa8,
	0x4a, 0x6f, 0xb2, 0x8d, 0xb3, 0xb7, 0xe2, 0x71, 0xb1, 0x58, 0x88, 0x68, 0x94, 0x17, 0xbc, 0x01,
	0x52, 0x29, 0x98, 0xbd, 0x19, 0x2f, 0x36, 0xaa, 0x36, 0xdb, 0xc2, 0x79, 0x52, 0x5f, 0x5a, 0x91,
	0x77, 0x00, 0xd3, 0xa8, 0x78, 0x47, 0x1b, 0x34, 0x6a, 0x9a, 0xeb, 0x14, 0x1e, 0xae, 0xcf, 0x66,
	0x43, 0xd5, 0xca, 0xd5, 0xd8, 0xfc, 0x35, 0x74, 0x27, 0x68, 0xde, 0x89, 0x86, 0xc6, 0x75, 0xd5,
	0x3c, 0x8b, 0xbc, 0x81, 0x6d, 0x8a, 0x21, 0x32, 0x85, 0xf5, 0xfd, 0x1a, 0xe6, 0x3d, 0xf7, 0x6e,
	0x8e, 0xe6, 0x81, 0xbe, 0x4d, 0x66, 0x06, 0x1f, 0xe7, 0x9c, 0xe2, 0xef, 0xf1, 0x5c, 0x8c, 0x59,
	0x1c, 0x8c, 0x4d, 0x9d, 0x59, 0x37, 0xfd, 0xc5, 0x7b, 0xf5, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x68, 0xc8, 0xd5, 0x1a, 0x07, 0x00, 0x00,
}
