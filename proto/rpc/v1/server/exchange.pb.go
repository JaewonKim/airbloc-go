// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rpc/v1/server/exchange.proto

package server // import "github.com/airbloc/airbloc-go/proto/rpc/v1/server"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/airbloc/airbloc-go/proto/rpc/v1"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_UNDEFINED Status = 0
	Status_NEUTRAL   Status = 1
	Status_PENDING   Status = 2
	Status_SETTLED   Status = 3
	Status_REJECTED  Status = 4
	Status_OPENED    Status = 5
	Status_CLOSED    Status = 6
)

var Status_name = map[int32]string{
	0: "UNDEFINED",
	1: "NEUTRAL",
	2: "PENDING",
	3: "SETTLED",
	4: "REJECTED",
	5: "OPENED",
	6: "CLOSED",
}
var Status_value = map[string]int32{
	"UNDEFINED": 0,
	"NEUTRAL":   1,
	"PENDING":   2,
	"SETTLED":   3,
	"REJECTED":  4,
	"OPENED":    5,
	"CLOSED":    6,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{0}
}

type Contract_Type int32

const (
	Contract_RICHARDIAN Contract_Type = 0
	Contract_SMART      Contract_Type = 1
)

var Contract_Type_name = map[int32]string{
	0: "RICHARDIAN",
	1: "SMART",
}
var Contract_Type_value = map[string]int32{
	"RICHARDIAN": 0,
	"SMART":      1,
}

func (x Contract_Type) String() string {
	return proto.EnumName(Contract_Type_name, int32(x))
}
func (Contract_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{2, 0}
}

type RichardianContract struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RichardianContract) Reset()         { *m = RichardianContract{} }
func (m *RichardianContract) String() string { return proto.CompactTextString(m) }
func (*RichardianContract) ProtoMessage()    {}
func (*RichardianContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{0}
}
func (m *RichardianContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RichardianContract.Unmarshal(m, b)
}
func (m *RichardianContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RichardianContract.Marshal(b, m, deterministic)
}
func (dst *RichardianContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RichardianContract.Merge(dst, src)
}
func (m *RichardianContract) XXX_Size() int {
	return xxx_messageInfo_RichardianContract.Size(m)
}
func (m *RichardianContract) XXX_DiscardUnknown() {
	xxx_messageInfo_RichardianContract.DiscardUnknown(m)
}

var xxx_messageInfo_RichardianContract proto.InternalMessageInfo

func (m *RichardianContract) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SmartContract struct {
	Address              *v1.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OpenSign             []byte      `protobuf:"bytes,2,opt,name=openSign,proto3" json:"openSign,omitempty"`
	OpenArgs             []byte      `protobuf:"bytes,3,opt,name=openArgs,proto3" json:"openArgs,omitempty"`
	CloseSign            []byte      `protobuf:"bytes,4,opt,name=closeSign,proto3" json:"closeSign,omitempty"`
	CloseArgs            []byte      `protobuf:"bytes,5,opt,name=closeArgs,proto3" json:"closeArgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SmartContract) Reset()         { *m = SmartContract{} }
func (m *SmartContract) String() string { return proto.CompactTextString(m) }
func (*SmartContract) ProtoMessage()    {}
func (*SmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{1}
}
func (m *SmartContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartContract.Unmarshal(m, b)
}
func (m *SmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartContract.Marshal(b, m, deterministic)
}
func (dst *SmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContract.Merge(dst, src)
}
func (m *SmartContract) XXX_Size() int {
	return xxx_messageInfo_SmartContract.Size(m)
}
func (m *SmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContract proto.InternalMessageInfo

func (m *SmartContract) GetAddress() *v1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SmartContract) GetOpenSign() []byte {
	if m != nil {
		return m.OpenSign
	}
	return nil
}

func (m *SmartContract) GetOpenArgs() []byte {
	if m != nil {
		return m.OpenArgs
	}
	return nil
}

func (m *SmartContract) GetCloseSign() []byte {
	if m != nil {
		return m.CloseSign
	}
	return nil
}

func (m *SmartContract) GetCloseArgs() []byte {
	if m != nil {
		return m.CloseArgs
	}
	return nil
}

type Contract struct {
	Type                 Contract_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=airbloc.rpc.v1.Contract_Type" json:"type,omitempty"`
	SmartEscrow          *SmartContract      `protobuf:"bytes,2,opt,name=smartEscrow,proto3" json:"smartEscrow,omitempty"`
	RicharEscrow         *RichardianContract `protobuf:"bytes,3,opt,name=richarEscrow,proto3" json:"richarEscrow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{2}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contract.Unmarshal(m, b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
}
func (dst *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(dst, src)
}
func (m *Contract) XXX_Size() int {
	return xxx_messageInfo_Contract.Size(m)
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetType() Contract_Type {
	if m != nil {
		return m.Type
	}
	return Contract_RICHARDIAN
}

func (m *Contract) GetSmartEscrow() *SmartContract {
	if m != nil {
		return m.SmartEscrow
	}
	return nil
}

func (m *Contract) GetRicharEscrow() *RichardianContract {
	if m != nil {
		return m.RicharEscrow
	}
	return nil
}

type Receipt struct {
	OfferId              *v1.Hash    `protobuf:"bytes,1,opt,name=offerId,proto3" json:"offerId,omitempty"`
	From                 *v1.Address `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *v1.Address `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{3}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Receipt.Unmarshal(m, b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
}
func (dst *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(dst, src)
}
func (m *Receipt) XXX_Size() int {
	return xxx_messageInfo_Receipt.Size(m)
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetOfferId() *v1.Hash {
	if m != nil {
		return m.OfferId
	}
	return nil
}

func (m *Receipt) GetFrom() *v1.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Receipt) GetTo() *v1.Address {
	if m != nil {
		return m.To
	}
	return nil
}

type OrderRequest struct {
	From                 *v1.Address `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *v1.Address `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Contract             *Contract   `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	DataIds              [][]byte    `protobuf:"bytes,4,rep,name=dataIds,proto3" json:"dataIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderRequest) Reset()         { *m = OrderRequest{} }
func (m *OrderRequest) String() string { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()    {}
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{4}
}
func (m *OrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRequest.Unmarshal(m, b)
}
func (m *OrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRequest.Marshal(b, m, deterministic)
}
func (dst *OrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRequest.Merge(dst, src)
}
func (m *OrderRequest) XXX_Size() int {
	return xxx_messageInfo_OrderRequest.Size(m)
}
func (m *OrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRequest proto.InternalMessageInfo

func (m *OrderRequest) GetFrom() *v1.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OrderRequest) GetTo() *v1.Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *OrderRequest) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *OrderRequest) GetDataIds() [][]byte {
	if m != nil {
		return m.DataIds
	}
	return nil
}

type Offer struct {
	From                 *v1.Address `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *v1.Address `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	DataIds              [][]byte    `protobuf:"bytes,3,rep,name=dataIds,proto3" json:"dataIds,omitempty"`
	Contract             *Contract   `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Status               Status      `protobuf:"varint,5,opt,name=status,proto3,enum=airbloc.rpc.v1.Status" json:"status,omitempty"`
	Reverted             bool        `protobuf:"varint,6,opt,name=reverted,proto3" json:"reverted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Offer) Reset()         { *m = Offer{} }
func (m *Offer) String() string { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()    {}
func (*Offer) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{5}
}
func (m *Offer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Offer.Unmarshal(m, b)
}
func (m *Offer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Offer.Marshal(b, m, deterministic)
}
func (dst *Offer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offer.Merge(dst, src)
}
func (m *Offer) XXX_Size() int {
	return xxx_messageInfo_Offer.Size(m)
}
func (m *Offer) XXX_DiscardUnknown() {
	xxx_messageInfo_Offer.DiscardUnknown(m)
}

var xxx_messageInfo_Offer proto.InternalMessageInfo

func (m *Offer) GetFrom() *v1.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Offer) GetTo() *v1.Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Offer) GetDataIds() [][]byte {
	if m != nil {
		return m.DataIds
	}
	return nil
}

func (m *Offer) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *Offer) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNDEFINED
}

func (m *Offer) GetReverted() bool {
	if m != nil {
		return m.Reverted
	}
	return false
}

type OfferCompact struct {
	From *v1.Address `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *v1.Address `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// TODO : richardian contract support
	Escrow               *v1.Address `protobuf:"bytes,3,opt,name=escrow,proto3" json:"escrow,omitempty"`
	Reverted             bool        `protobuf:"varint,4,opt,name=reverted,proto3" json:"reverted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OfferCompact) Reset()         { *m = OfferCompact{} }
func (m *OfferCompact) String() string { return proto.CompactTextString(m) }
func (*OfferCompact) ProtoMessage()    {}
func (*OfferCompact) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{6}
}
func (m *OfferCompact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfferCompact.Unmarshal(m, b)
}
func (m *OfferCompact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfferCompact.Marshal(b, m, deterministic)
}
func (dst *OfferCompact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfferCompact.Merge(dst, src)
}
func (m *OfferCompact) XXX_Size() int {
	return xxx_messageInfo_OfferCompact.Size(m)
}
func (m *OfferCompact) XXX_DiscardUnknown() {
	xxx_messageInfo_OfferCompact.DiscardUnknown(m)
}

var xxx_messageInfo_OfferCompact proto.InternalMessageInfo

func (m *OfferCompact) GetFrom() *v1.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OfferCompact) GetTo() *v1.Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *OfferCompact) GetEscrow() *v1.Address {
	if m != nil {
		return m.Escrow
	}
	return nil
}

func (m *OfferCompact) GetReverted() bool {
	if m != nil {
		return m.Reverted
	}
	return false
}

type Offers struct {
	OfferIds             []*v1.Hash `protobuf:"bytes,1,rep,name=offerIds,proto3" json:"offerIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Offers) Reset()         { *m = Offers{} }
func (m *Offers) String() string { return proto.CompactTextString(m) }
func (*Offers) ProtoMessage()    {}
func (*Offers) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{7}
}
func (m *Offers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Offers.Unmarshal(m, b)
}
func (m *Offers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Offers.Marshal(b, m, deterministic)
}
func (dst *Offers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offers.Merge(dst, src)
}
func (m *Offers) XXX_Size() int {
	return xxx_messageInfo_Offers.Size(m)
}
func (m *Offers) XXX_DiscardUnknown() {
	xxx_messageInfo_Offers.DiscardUnknown(m)
}

var xxx_messageInfo_Offers proto.InternalMessageInfo

func (m *Offers) GetOfferIds() []*v1.Hash {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

type DataIds struct {
	OfferId              *v1.Hash `protobuf:"bytes,1,opt,name=offerId,proto3" json:"offerId,omitempty"`
	DataIds              [][]byte `protobuf:"bytes,2,rep,name=dataIds,proto3" json:"dataIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataIds) Reset()         { *m = DataIds{} }
func (m *DataIds) String() string { return proto.CompactTextString(m) }
func (*DataIds) ProtoMessage()    {}
func (*DataIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_exchange_89a6d9e5c64cfca8, []int{8}
}
func (m *DataIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataIds.Unmarshal(m, b)
}
func (m *DataIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataIds.Marshal(b, m, deterministic)
}
func (dst *DataIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataIds.Merge(dst, src)
}
func (m *DataIds) XXX_Size() int {
	return xxx_messageInfo_DataIds.Size(m)
}
func (m *DataIds) XXX_DiscardUnknown() {
	xxx_messageInfo_DataIds.DiscardUnknown(m)
}

var xxx_messageInfo_DataIds proto.InternalMessageInfo

func (m *DataIds) GetOfferId() *v1.Hash {
	if m != nil {
		return m.OfferId
	}
	return nil
}

func (m *DataIds) GetDataIds() [][]byte {
	if m != nil {
		return m.DataIds
	}
	return nil
}

func init() {
	proto.RegisterType((*RichardianContract)(nil), "airbloc.rpc.v1.RichardianContract")
	proto.RegisterType((*SmartContract)(nil), "airbloc.rpc.v1.SmartContract")
	proto.RegisterType((*Contract)(nil), "airbloc.rpc.v1.Contract")
	proto.RegisterType((*Receipt)(nil), "airbloc.rpc.v1.Receipt")
	proto.RegisterType((*OrderRequest)(nil), "airbloc.rpc.v1.OrderRequest")
	proto.RegisterType((*Offer)(nil), "airbloc.rpc.v1.Offer")
	proto.RegisterType((*OfferCompact)(nil), "airbloc.rpc.v1.OfferCompact")
	proto.RegisterType((*Offers)(nil), "airbloc.rpc.v1.Offers")
	proto.RegisterType((*DataIds)(nil), "airbloc.rpc.v1.DataIds")
	proto.RegisterEnum("airbloc.rpc.v1.Status", Status_name, Status_value)
	proto.RegisterEnum("airbloc.rpc.v1.Contract_Type", Contract_Type_name, Contract_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeClient interface {
	Prepare(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*v1.Hash, error)
	AddDataIds(ctx context.Context, in *DataIds, opts ...grpc.CallOption) (*empty.Empty, error)
	Order(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error)
	Settle(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error)
	Reject(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error)
	CloseOrder(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*Receipt, error)
	GetOffer(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*Offer, error)
	GetOfferCompact(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*OfferCompact, error)
	GetReceiptsByOfferor(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error)
	GetReceiptsByOfferee(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error)
	GetReceiptsByEscrow(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error)
}

type exchangeClient struct {
	cc *grpc.ClientConn
}

func NewExchangeClient(cc *grpc.ClientConn) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) Prepare(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*v1.Hash, error) {
	out := new(v1.Hash)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) AddDataIds(ctx context.Context, in *DataIds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/AddDataIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Order(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Settle(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/Settle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Reject(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CloseOrder(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/CloseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOffer(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*Offer, error) {
	out := new(Offer)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/GetOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOfferCompact(ctx context.Context, in *v1.Hash, opts ...grpc.CallOption) (*OfferCompact, error) {
	out := new(OfferCompact)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/GetOfferCompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetReceiptsByOfferor(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error) {
	out := new(Offers)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/GetReceiptsByOfferor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetReceiptsByOfferee(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error) {
	out := new(Offers)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/GetReceiptsByOfferee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetReceiptsByEscrow(ctx context.Context, in *v1.Address, opts ...grpc.CallOption) (*Offers, error) {
	out := new(Offers)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Exchange/GetReceiptsByEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
type ExchangeServer interface {
	Prepare(context.Context, *OrderRequest) (*v1.Hash, error)
	AddDataIds(context.Context, *DataIds) (*empty.Empty, error)
	Order(context.Context, *v1.Hash) (*empty.Empty, error)
	Settle(context.Context, *v1.Hash) (*empty.Empty, error)
	Reject(context.Context, *v1.Hash) (*empty.Empty, error)
	CloseOrder(context.Context, *v1.Hash) (*Receipt, error)
	GetOffer(context.Context, *v1.Hash) (*Offer, error)
	GetOfferCompact(context.Context, *v1.Hash) (*OfferCompact, error)
	GetReceiptsByOfferor(context.Context, *v1.Address) (*Offers, error)
	GetReceiptsByOfferee(context.Context, *v1.Address) (*Offers, error)
	GetReceiptsByEscrow(context.Context, *v1.Address) (*Offers, error)
}

func RegisterExchangeServer(s *grpc.Server, srv ExchangeServer) {
	s.RegisterService(&_Exchange_serviceDesc, srv)
}

func _Exchange_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Prepare(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_AddDataIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AddDataIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/AddDataIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AddDataIds(ctx, req.(*DataIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Order(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Settle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Settle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/Settle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Settle(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Reject(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/CloseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CloseOrder(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/GetOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOffer(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOfferCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOfferCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/GetOfferCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOfferCompact(ctx, req.(*v1.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetReceiptsByOfferor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetReceiptsByOfferor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/GetReceiptsByOfferor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetReceiptsByOfferor(ctx, req.(*v1.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetReceiptsByOfferee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetReceiptsByOfferee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/GetReceiptsByOfferee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetReceiptsByOfferee(ctx, req.(*v1.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetReceiptsByEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetReceiptsByEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Exchange/GetReceiptsByEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetReceiptsByEscrow(ctx, req.(*v1.Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Exchange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.rpc.v1.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Exchange_Prepare_Handler,
		},
		{
			MethodName: "AddDataIds",
			Handler:    _Exchange_AddDataIds_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Exchange_Order_Handler,
		},
		{
			MethodName: "Settle",
			Handler:    _Exchange_Settle_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _Exchange_Reject_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _Exchange_CloseOrder_Handler,
		},
		{
			MethodName: "GetOffer",
			Handler:    _Exchange_GetOffer_Handler,
		},
		{
			MethodName: "GetOfferCompact",
			Handler:    _Exchange_GetOfferCompact_Handler,
		},
		{
			MethodName: "GetReceiptsByOfferor",
			Handler:    _Exchange_GetReceiptsByOfferor_Handler,
		},
		{
			MethodName: "GetReceiptsByOfferee",
			Handler:    _Exchange_GetReceiptsByOfferee_Handler,
		},
		{
			MethodName: "GetReceiptsByEscrow",
			Handler:    _Exchange_GetReceiptsByEscrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/server/exchange.proto",
}

func init() {
	proto.RegisterFile("proto/rpc/v1/server/exchange.proto", fileDescriptor_exchange_89a6d9e5c64cfca8)
}

var fileDescriptor_exchange_89a6d9e5c64cfca8 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x27, 0x8e, 0xe3, 0x9e, 0x66, 0x8b, 0x35, 0x2c, 0xc5, 0x0a, 0x05, 0x15, 0xdf, 0x50,
	0x81, 0xb0, 0x69, 0x97, 0x1f, 0x09, 0xb4, 0x42, 0xd9, 0xd8, 0xed, 0x06, 0x95, 0xb4, 0x9a, 0x64,
	0x6f, 0xb8, 0x73, 0xed, 0xc9, 0x0f, 0x4a, 0x32, 0x66, 0x66, 0x12, 0xc8, 0x53, 0xf0, 0x2c, 0x48,
	0x88, 0x47, 0xe0, 0x5d, 0x78, 0x04, 0xee, 0xd0, 0x4c, 0xc6, 0xd9, 0x38, 0x71, 0xd8, 0xcd, 0xc5,
	0x5e, 0xc5, 0xe3, 0xef, 0x3b, 0xdf, 0x7c, 0xe7, 0x9c, 0x39, 0x9e, 0x80, 0x97, 0x31, 0x2a, 0x68,
	0xc0, 0xb2, 0x24, 0x58, 0x5c, 0x06, 0x9c, 0xb0, 0x05, 0x61, 0x01, 0xf9, 0x2d, 0x19, 0xc5, 0xb3,
	0x21, 0xf1, 0x15, 0x88, 0x4e, 0xe2, 0x31, 0x7b, 0x98, 0xd0, 0xc4, 0x67, 0x59, 0xe2, 0x2f, 0x2e,
	0x9b, 0x1f, 0x0c, 0x29, 0x1d, 0x4e, 0x48, 0xa0, 0xd0, 0x87, 0xf9, 0x20, 0x20, 0xd3, 0x4c, 0x2c,
	0x57, 0xe4, 0xe6, 0x47, 0x65, 0x82, 0x69, 0x2c, 0x62, 0x8d, 0xbb, 0x05, 0x5c, 0x2c, 0x33, 0xc2,
	0x57, 0x88, 0x77, 0x01, 0x08, 0x8f, 0x93, 0x51, 0xcc, 0xd2, 0x71, 0x3c, 0x6b, 0xd3, 0x99, 0x60,
	0x71, 0x22, 0x10, 0x02, 0x73, 0x14, 0xf3, 0x91, 0x6b, 0x9c, 0x1b, 0x17, 0x0d, 0xac, 0x9e, 0xbd,
	0xbf, 0x0c, 0x78, 0xdc, 0x9b, 0xc6, 0x4c, 0xac, 0x59, 0x97, 0x50, 0x8f, 0xd3, 0x94, 0x11, 0xce,
	0x15, 0xf1, 0xf8, 0xea, 0x7d, 0xbf, 0x68, 0xda, 0x6f, 0xad, 0x60, 0x9c, 0xf3, 0x50, 0x13, 0x6c,
	0x9a, 0x91, 0x59, 0x6f, 0x3c, 0x9c, 0xb9, 0x15, 0x25, 0xbe, 0x5e, 0xe7, 0x58, 0x8b, 0x0d, 0xb9,
	0x5b, 0x7d, 0x85, 0xc9, 0x35, 0x3a, 0x83, 0xa3, 0x64, 0x42, 0x39, 0x51, 0x81, 0xa6, 0x02, 0x5f,
	0xbd, 0x58, 0xa3, 0x2a, 0xb4, 0xb6, 0x81, 0xca, 0x17, 0xde, 0x3f, 0x06, 0xd8, 0x1b, 0x9e, 0x4d,
	0x99, 0xbe, 0x32, 0x7c, 0x72, 0xf5, 0xe1, 0xb6, 0xe1, 0x9c, 0xe7, 0xf7, 0x97, 0x19, 0xc1, 0x8a,
	0x8a, 0xbe, 0x87, 0x63, 0x2e, 0xf3, 0x8e, 0x78, 0xc2, 0xe8, 0xaf, 0xca, 0xf6, 0xf1, 0x6e, 0x64,
	0xa1, 0x34, 0x78, 0x33, 0x02, 0x5d, 0x43, 0x83, 0xa9, 0x1a, 0x6b, 0x85, 0xaa, 0x52, 0xf0, 0xb6,
	0x15, 0x76, 0xfb, 0x80, 0x0b, 0x71, 0xde, 0xc7, 0x60, 0x4a, 0x5b, 0xe8, 0x04, 0x00, 0x77, 0xda,
	0x2f, 0x5a, 0x38, 0xec, 0xb4, 0xba, 0xce, 0x23, 0x74, 0x04, 0xb5, 0xde, 0x8f, 0x2d, 0xdc, 0x77,
	0x0c, 0xef, 0x77, 0x03, 0xea, 0x98, 0x24, 0x64, 0x9c, 0x09, 0xe4, 0x43, 0x9d, 0x0e, 0x06, 0x84,
	0x75, 0x52, 0xdd, 0x9e, 0x27, 0xdb, 0x3b, 0xbe, 0x88, 0xf9, 0x08, 0xe7, 0x24, 0xf4, 0x19, 0x98,
	0x03, 0x46, 0xa7, 0x3a, 0xc1, 0xbd, 0xbd, 0x54, 0x24, 0xf4, 0x09, 0x54, 0x04, 0xd5, 0x99, 0xec,
	0xa5, 0x56, 0x04, 0xf5, 0xfe, 0x34, 0xa0, 0x71, 0xc7, 0x52, 0xc2, 0x30, 0xf9, 0x65, 0x4e, 0xb8,
	0x58, 0x6f, 0x63, 0xbc, 0xf9, 0x36, 0x95, 0xd7, 0x6e, 0x83, 0xbe, 0x04, 0x3b, 0xd1, 0x55, 0xd3,
	0xae, 0xdc, 0x7d, 0xbd, 0xc5, 0x6b, 0x26, 0x72, 0xa1, 0x2e, 0xa7, 0xa4, 0x93, 0x72, 0xd7, 0x3c,
	0xaf, 0x5e, 0x34, 0x70, 0xbe, 0xf4, 0xfe, 0x35, 0xa0, 0x76, 0x27, 0x0b, 0xf3, 0x96, 0xfc, 0x6e,
	0xec, 0x5c, 0x2d, 0xec, 0x5c, 0xc8, 0xc4, 0x7c, 0xe3, 0x4c, 0x7c, 0xb0, 0xb8, 0x88, 0xc5, 0x7c,
	0x75, 0xfe, 0x4f, 0xae, 0x4e, 0x77, 0xce, 0xa7, 0x42, 0xb1, 0x66, 0xc9, 0x61, 0x63, 0x64, 0x41,
	0x98, 0x20, 0xa9, 0x6b, 0x9d, 0x1b, 0x17, 0x36, 0x5e, 0xaf, 0xbd, 0x3f, 0x64, 0xcb, 0x64, 0xee,
	0x6d, 0x3a, 0xcd, 0xa4, 0xf8, 0xdb, 0x29, 0x41, 0x00, 0x16, 0xd9, 0x1c, 0x88, 0xbd, 0x64, 0x4d,
	0x2b, 0x78, 0x36, 0xb7, 0x3c, 0x7f, 0x0b, 0x96, 0xb2, 0xcc, 0xd1, 0x17, 0x60, 0xeb, 0x13, 0x2d,
	0x3f, 0x4b, 0xd5, 0xbd, 0xe7, 0x7e, 0xcd, 0xf2, 0x7a, 0x50, 0x0f, 0x75, 0xf1, 0x0f, 0x9d, 0x99,
	0x8d, 0x36, 0x56, 0x0a, 0x6d, 0xfc, 0x34, 0x05, 0x6b, 0x55, 0x72, 0xf4, 0x18, 0x8e, 0x5e, 0x76,
	0xc3, 0xe8, 0xba, 0xd3, 0x8d, 0x42, 0xe7, 0x11, 0x3a, 0x86, 0x7a, 0x37, 0x7a, 0xd9, 0xc7, 0xad,
	0x5b, 0xc7, 0x90, 0x8b, 0xfb, 0xa8, 0x1b, 0x76, 0xba, 0x37, 0x4e, 0x45, 0x2e, 0x7a, 0x51, 0xbf,
	0x7f, 0x1b, 0x85, 0x4e, 0x15, 0x35, 0xc0, 0xc6, 0xd1, 0x0f, 0x51, 0xbb, 0x1f, 0x85, 0x8e, 0x89,
	0x00, 0xac, 0xbb, 0xfb, 0x48, 0x0a, 0xd4, 0xe4, 0x73, 0xfb, 0xf6, 0xae, 0x17, 0x85, 0x8e, 0x75,
	0xf5, 0x77, 0x0d, 0xec, 0x48, 0x5f, 0x1c, 0xe8, 0x19, 0xd4, 0xef, 0x19, 0xc9, 0x62, 0x46, 0xd0,
	0xd9, 0xb6, 0xed, 0xcd, 0x11, 0x6c, 0x96, 0x26, 0x85, 0x9e, 0x01, 0xb4, 0xd2, 0x34, 0xaf, 0xc4,
	0x4e, 0x37, 0x34, 0xd0, 0x3c, 0xf5, 0x57, 0x37, 0x91, 0x9f, 0xdf, 0x44, 0x7e, 0x24, 0x6f, 0x22,
	0xf4, 0x15, 0xd4, 0xd4, 0x26, 0xa8, 0x54, 0x7d, 0x6f, 0xd8, 0xd7, 0x60, 0xf5, 0x88, 0x10, 0x13,
	0x72, 0x78, 0x1c, 0x26, 0x3f, 0x93, 0x44, 0x1c, 0x18, 0xf7, 0x1d, 0x40, 0x5b, 0x5e, 0x0d, 0xff,
	0xe7, 0x75, 0x27, 0xf7, 0xfc, 0x93, 0xfa, 0x0d, 0xd8, 0x37, 0x44, 0xac, 0xbe, 0x0b, 0xe5, 0xa1,
	0xef, 0xed, 0x14, 0x5e, 0x91, 0x23, 0x78, 0x27, 0x0f, 0xcc, 0x87, 0xaa, 0x3c, 0xfe, 0xac, 0x34,
	0x3e, 0x8f, 0xb9, 0x81, 0x27, 0x37, 0x44, 0x68, 0x37, 0xfc, 0xf9, 0x52, 0x81, 0x94, 0xa1, 0x7d,
	0xa3, 0xd3, 0x3c, 0x2d, 0x95, 0xe3, 0xe5, 0x42, 0x84, 0x1c, 0x2e, 0x74, 0x0d, 0xef, 0x16, 0x84,
	0xf4, 0x95, 0x77, 0xa8, 0xce, 0xf3, 0xa7, 0x3f, 0x5d, 0x0e, 0xc7, 0x62, 0x34, 0x7f, 0xf0, 0x13,
	0x3a, 0x0d, 0x34, 0x27, 0xff, 0xfd, 0x7c, 0x48, 0x83, 0x92, 0x7f, 0x38, 0x0f, 0x96, 0x7a, 0xf9,
	0xf4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xee, 0x94, 0x7d, 0x50, 0x09, 0x00, 0x00,
}
