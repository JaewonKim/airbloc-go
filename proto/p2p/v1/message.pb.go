// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/p2p/v1/message.proto

package v1 // import "github.com/airbloc/airbloc-go/proto/p2p/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CID int32

const (
	CID_AIRBLOC CID = 0
)

var CID_name = map[int32]string{
	0: "AIRBLOC",
}
var CID_value = map[string]int32{
	"AIRBLOC": 0,
}

func (x CID) String() string {
	return proto.EnumName(CID_name, int32(x))
}
func (CID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_070846d90c4fc861, []int{0}
}

type Message struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	From                 []byte   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Protocol             []byte   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_070846d90c4fc861, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetProtocol() []byte {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TestPing struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestPing) Reset()         { *m = TestPing{} }
func (m *TestPing) String() string { return proto.CompactTextString(m) }
func (*TestPing) ProtoMessage()    {}
func (*TestPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_070846d90c4fc861, []int{1}
}
func (m *TestPing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestPing.Unmarshal(m, b)
}
func (m *TestPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestPing.Marshal(b, m, deterministic)
}
func (dst *TestPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPing.Merge(dst, src)
}
func (m *TestPing) XXX_Size() int {
	return xxx_messageInfo_TestPing.Size(m)
}
func (m *TestPing) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPing.DiscardUnknown(m)
}

var xxx_messageInfo_TestPing proto.InternalMessageInfo

func (m *TestPing) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TestPong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestPong) Reset()         { *m = TestPong{} }
func (m *TestPong) String() string { return proto.CompactTextString(m) }
func (*TestPong) ProtoMessage()    {}
func (*TestPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_070846d90c4fc861, []int{2}
}
func (m *TestPong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestPong.Unmarshal(m, b)
}
func (m *TestPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestPong.Marshal(b, m, deterministic)
}
func (dst *TestPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPong.Merge(dst, src)
}
func (m *TestPong) XXX_Size() int {
	return xxx_messageInfo_TestPong.Size(m)
}
func (m *TestPong) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPong.DiscardUnknown(m)
}

var xxx_messageInfo_TestPong proto.InternalMessageInfo

func (m *TestPong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "airbloc.p2p.v1.Message")
	proto.RegisterType((*TestPing)(nil), "airbloc.p2p.v1.TestPing")
	proto.RegisterType((*TestPong)(nil), "airbloc.p2p.v1.TestPong")
	proto.RegisterEnum("airbloc.p2p.v1.CID", CID_name, CID_value)
}

func init() { proto.RegisterFile("proto/p2p/v1/message.proto", fileDescriptor_message_070846d90c4fc861) }

var fileDescriptor_message_070846d90c4fc861 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x30, 0x2a, 0xd0, 0x2f, 0x33, 0xd4, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f,
	0xd5, 0x03, 0x0b, 0x0a, 0xf1, 0x25, 0x66, 0x16, 0x25, 0xe5, 0xe4, 0x27, 0xeb, 0x15, 0x18, 0x15,
	0xe8, 0x95, 0x19, 0x2a, 0x35, 0x32, 0x72, 0xb1, 0xfb, 0x42, 0x54, 0x08, 0x89, 0x70, 0xb1, 0x96,
	0xe4, 0x17, 0x64, 0x26, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x42, 0x42, 0x5c,
	0x2c, 0x29, 0x89, 0x25, 0x89, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0x36, 0x48, 0x2c,
	0xad, 0x28, 0x3f, 0x57, 0x82, 0x19, 0x22, 0x06, 0x62, 0x0b, 0x49, 0x71, 0x71, 0x80, 0xad, 0x48,
	0xce, 0xcf, 0x91, 0x60, 0x01, 0x8b, 0xc3, 0xf9, 0x42, 0x32, 0x5c, 0x9c, 0xc5, 0x99, 0xe9, 0x79,
	0x89, 0x25, 0xa5, 0x45, 0xa9, 0x12, 0xac, 0x60, 0x49, 0x84, 0x80, 0x92, 0x0a, 0x17, 0x47, 0x48,
	0x6a, 0x71, 0x49, 0x40, 0x66, 0x5e, 0xba, 0x90, 0x04, 0x17, 0x3b, 0xd4, 0xc1, 0x50, 0x57, 0xc0,
	0xb8, 0x70, 0x55, 0xf9, 0xf8, 0x54, 0x69, 0x09, 0x71, 0x31, 0x3b, 0x7b, 0xba, 0x08, 0x71, 0x73,
	0xb1, 0x3b, 0x7a, 0x06, 0x39, 0xf9, 0xf8, 0x3b, 0x0b, 0x30, 0x38, 0xe9, 0x44, 0x69, 0xa5, 0x67,
	0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0x03, 0x00, 0x46, 0xeb, 0xa6, 0xe7,
	0xeb, 0x23, 0x87, 0x57, 0x12, 0x1b, 0x98, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x81, 0xf4,
	0x4e, 0xcf, 0x46, 0x01, 0x00, 0x00,
}
